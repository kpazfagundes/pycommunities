{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ControlledExpansionPanels","state","expanded","handleChange","panel","event","_this","setState","_this2","this","classes","props","react_default","a","createElement","className","root","ExpansionPanel_default","back1","onChange","ExpansionPanelSummary_default","Typography_default","Avatar_default","src","bigAvatar","headingTop","ExpansionPanelDetails_default","people","map","person","i","imgSrc","heading","name","title","detail","dinamica","React","Component","withStyles","theme","width","verticalAlign","margin","backgroundColor","fontSize","typography","pxToRem","flexShrink","color","lineHeight","headingTitle","flexBasis","secondaryHeading","palette","text","secondary","height","Boolean","window","location","hostname","match","__webpack_require__","d","__webpack_exports__","App","ReactDOM","render","top","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3a61426.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport people from './people';\n\nconst styles = theme => ({\n  root: {\n    width: '95%',\n    verticalAlign: 'middle',\n    margin: 20,\n    backgroundColor: '#6200EE'\n  },\n  headingTop: {\n    fontSize: theme.typography.pxToRem(18),\n    width: '100%',\n    flexShrink: 0,\n    verticalAlign: 'middle',\n    color: '#757575',\n    lineHeight:'100px'\n\n  },\n  headingTitle: {\n    fontSize: theme.typography.pxToRem(18),\n    width: '100%',\n    flexBasis: '30%',\n    flexShrink: 0,\n    verticalAlign: 'middle',\n    color: '#757575',   \n    lineHeight:'100px'\n\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(18),\n    width: '100%',\n    flexShrink: 0,\n    verticalAlign: 'middle',\n    color: '#757575', \n    lineHeight:'50px',\n    flexBasis: '70%',\n\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n    margin: 20,\n    width: '80%',\n    \n  },\n  back1: {\n    backgroundColor: '#ffef62'\n  },\n  bigAvatar: {\n    margin: 10,\n    width: 100,\n    height: 100,\n    flexBasis: '20%',\n  },\n\n});\n\nclass ControlledExpansionPanels extends React.Component {\n  state = {\n    expanded: null,\n  };\n\n  handleChange = panel => (event, expanded) => {\n    this.setState({\n      expanded: expanded ? panel : false,\n    });\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { expanded } = this.state;\n\n    return (\n      <div className={classes.root}>\n      <ExpansionPanel className={classes.back1} expanded={expanded === 'panel0'} onChange={this.handleChange('panel0')}>\n            <ExpansionPanelSummary>\n              <Typography><Avatar src='./logo.jpg' className={classes.bigAvatar}/></Typography>\n              <Typography className={classes.headingTop}>Sobre o evento</Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n              <Typography>\n              As comunidades de Python de BH (PyLadies, PyData e PythonBH) se reuniram para fazer o \n            PyCommunities Experience no dia 26/01/2019 na CI&T. O evento é sem fins lucrativos, que \n            tem como objetivo reunir todas as tribos dessa tecnologia. Vamos compartilhar informações\n             e experiências da nossa linguagem favorita que a cada dia vem conquistando cada vez mais\n              espaço no mercado, além de abordar outras coisas muito importantes como inclusão e \n              diversidade.\n              Se você é um PySer que tem um tema bacana que queira compartilhar, submeta sua palestra\n               no link https://goo.gl/forms/lHRJr8QZP8NdCMiH2 e se você ainda não conseguiu pensar \n               num tema bacana para compartilhar, vá no evento e nos ajude a fortalecer a comunidade!\n               *As inscrições para o evento serão recebidas através da plataforma Meetup, no grupo \n               PythonBH (https://www.meetup.com/pt-BR/PythonMG/)\n              </Typography>\n            </ExpansionPanelDetails>\n          </ExpansionPanel>\n        {people.map((person, i) =>\n        <ExpansionPanel className={classes.back1} expanded={expanded === 'panel' + (i + 1)} onChange={this.handleChange('panel' + (i + 1))}>\n            <ExpansionPanelSummary>\n              <Typography><Avatar src={person.imgSrc} className={classes.bigAvatar}/></Typography>\n              <Typography className={classes.heading}>{person.name}<br/>- {person.title}</Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n              <Typography>\n                Sobre o(a) palestrante: {person.detail}\n              </Typography>\n            </ExpansionPanelDetails>\n            <ExpansionPanelDetails>\n              <Typography>\n                Dinâmica da palestra: {person.dinamica}\n              </Typography>\n            </ExpansionPanelDetails>\n          </ExpansionPanel>\n        )}\n      </div>\n    );\n  }\n}\n\nControlledExpansionPanels.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(ControlledExpansionPanels);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <div>\n        <img src=\"./pycommex.png\" width='95%' top='10px'/>\n        \n        <App/>\n    </div>\n\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nexport { App };"],"sourceRoot":""}